# Import the BaseGeometry class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Create an instance of BaseGeometry
>>> bg = BaseGeometry()

# Test: Calling area() should raise an exception
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test: integer_validator() should accept a valid integer
>>> bg.integer_validator("my_number", 10)

# Test: integer_validator() should raise TypeError if value is not an integer
>>> bg.integer_validator("my_number", "abc")
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise TypeError if value is a float
>>> bg.integer_validator("my_number", 5.5)
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise TypeError if value is a list
>>> bg.integer_validator("my_number", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise TypeError if value is a tuple
>>> bg.integer_validator("my_number", (1, 2))
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise TypeError if value is a dictionary
>>> bg.integer_validator("my_number", {"num": 10})
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise TypeError if value is None
>>> bg.integer_validator("my_number", None)
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer

# Test: integer_validator() should raise ValueError if value is zero
>>> bg.integer_validator("my_number", 0)
Traceback (most recent call last):
    ...
ValueError: my_number must be greater than 0

# Test: integer_validator() should raise ValueError if value is negative
>>> bg.integer_validator("my_number", -5)
Traceback (most recent call last):
    ...
ValueError: my_number must be greater than 0

# Test: integer_validator() should work correctly with a large positive integer
>>> bg.integer_validator("my_number", 999999999)

# Test: integer_validator() should work correctly with the smallest positive integer (1)
>>> bg.integer_validator("my_number", 1)

# Test: integer_validator() should work correctly with another valid integer
>>> bg.integer_validator("height", 50)

# Test: integer_validator() should work correctly when name is different
>>> bg.integer_validator("width", 42)

# Test: integer_validator() should work correctly when name has spaces
>>> bg.integer_validator("test value", 100)

# Test: integer_validator() should work correctly when name is a single character
>>> bg.integer_validator("x", 25)

# Test: integer_validator() should raise TypeError if value is a boolean
>>> bg.integer_validator("my_number", True)
Traceback (most recent call last):
    ...
TypeError: my_number must be an integer
